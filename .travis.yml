language: python
sudo: false
# Based heavily on pyqtgraph .travis.yml 2015-11-30 06:57

# Here we use anaconda for 2.6 and 3.3, since it provides the simplest
# interface for running different versions of Python. We could also use
# it for 2.7, but the Ubuntu system has installable 2.7 Qt4-GL, which
# allows for more complete testing.
notifications:
  email: false

virtualenv:
    system_site_packages: true


env:
    - PYTHON=2.7 QT=pyside TEST=standard

before_install:
    - if [ ${TRAVIS_PYTHON_VERSION:0:1} == "2" ]; then wget http://repo.continuum.io/miniconda/Miniconda-3.5.5-Linux-x86_64.sh -O miniconda.sh; else wget http://repo.continuum.io/miniconda/Miniconda3-3.5.5-Linux-x86_64.sh -O miniconda.sh; fi
    - chmod +x miniconda.sh
    - ./miniconda.sh -b -p /home/travis/mc
    - export PATH=/home/travis/mc/bin:$PATH
    
install:
    - export GIT_FULL_HASH=`git rev-parse HEAD`
    - conda update conda --yes
    - conda create -n test_env python=${PYTHON} --yes
    - source activate test_env
    #- conda install numpy pyopengl pytest flake8 six coverage --yes
    - conda install numpy pytest coverage --yes
    - echo ${QT}
    - echo ${TEST}
    - echo ${PYTHON}
    
    - if [ "${QT}" == "pyside" ]; then
          conda install pyside --yes;
      fi;


    - pip install pyqtgraph # 

    - pip install pytest-qt # qtbot signals and button clicking

before_script:
    # We need to create a (fake) display on Travis, let's use a standard resolution
    - export DISPLAY=:99.0
    - "sh -e /etc/init.d/xvfb start"
    - /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1080x24 -ac +extension GLX +render
    
    # Make sure everyone uses the correct python (this is handled by conda)
    - which python
    - python --version
    - pwd
    - ls
    # Help color output from each test
    - RESET='\033[0m';
      RED='\033[00;31m';
      GREEN='\033[00;32m';
      YELLOW='\033[00;33m';
      BLUE='\033[00;34m';
      PURPLE='\033[00;35m';
      CYAN='\033[00;36m';
      WHITE='\033[00;37m';
      start_test() {
        echo -e "${BLUE}======== Starting $1 ========${RESET}";
      };
      check_output() {
        ret=$?;
        if [ $ret == 0 ]; then
            echo -e "${GREEN}>>>>>>    $1 passed    <<<<<<${RESET}";
        else
            echo -e "${RED}>>>>>>    $1 FAILED    <<<<<<${RESET}";
        fi;
        return $ret;
      };

script:
  
    - source activate test_env
    
    # Run unit tests
    - start_test "unit tests";
      PYTHONPATH=. py.test  --cov bluegraph;
      check_output "unit tests";
    - echo "test script finished. Current directory:"
    - pwd
    
after_success:
  - pip install coveralls --upgrade  # add another coverage integration service
  - coveralls
